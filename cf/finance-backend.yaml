AWSTemplateFormatVersion: "2010-09-09"
Description: Template para crear una API Gateway y una Lambda en Python que imprime "Hello, World!" en los registros de CloudWatch.

Parameters:
  pStage:
    Type: String
    Default: dev
    Description: Ambiente

  DeploymentBucketName:
    Type: String
    Description: Nombre del bucket de despliegue

  DeploymentBucketARN:
    Type: String
    Description: ARN del bucket de despliegue

Resources:
  ### LAMBDAS ###
  rLambdaRegisterClientPetition:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "lambda-client-register-petition-${pStage}"
      Role: !GetAtt "rIAMLambdaRegisterClientPetitionRole.Arn"
      Handler: "Register_Client_Petitions/index.lambda_handler"
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: "api-rest/Register_Client_Petitions.zip" # Reemplaza con la ubicación de tu código en el bucket
      Environment: # Agrega la nueva variable de entorno aquí
        Variables:
          DBTableNewClientsToRegister: !Ref "rDynamoDbNewClientsFinanceTable"
      Runtime: python3.8

  rIAMLambdaRegisterClientPetitionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "lambda-client-register-petition-iam-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLogsPolocy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:<api-id>/*/<method>/<resource>"

        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                Resource: !GetAtt rDynamoDbNewClientsFinanceTable.Arn

  rLambdaLoanMotorDecision:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "loan-motor-decision-${pStage}"
      Role: !GetAtt "rIAMLambdaLoanMotorDecisionRole.Arn"
      Handler: "Loans_Motor_Decision/index.lambda_handler"
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: "api-rest/Loans_Motor_Decision.zip" # Reemplaza con la ubicación de tu código en el bucket
      Environment: # Agrega la nueva variable de entorno aquí
        Variables:
          DBTableNewClientsToRegister: !Ref "rDynamoDbNewClientsFinanceTable"
          LambdaEmailSenderClient: !Ref "rLambdaClientStatusEmail"
      Runtime: python3.8

  rIAMLambdaLoanMotorDecisionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "loan-motor-decision-iam-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLogsPolocy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: DynamoDBStreamsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource: !GetAtt rDynamoDbNewClientsFinanceTable.StreamArn
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:<api-id>/*/<method>/<resource>"
        - PolicyName: LambdaInvokeEmailSenderPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: !GetAtt "rLambdaClientStatusEmail.Arn"

        # - PolicyName: DynamoDBPolicy
        #   PolicyDocument:
        #     Version: "2012-10-17"
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - "dynamodb:PutItem"
        #         Resource: !GetAtt rDynamoDbNewClientsFinanceTable.Arn


  rLambdaClientStatusEmail:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "client-status-email-${pStage}"
      Role: !GetAtt "rIAMLambdaClientStatusEmailRole.Arn"
      Handler: "Client_Status_Email/index.lambda_handler"
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: "api-rest/Client_Status_Email.zip" # Reemplaza con la ubicación de tu código en el bucket
      Environment: # Agrega la nueva variable de entorno aquí
        Variables:
          DBTableNewClientsToRegister: !Ref "rDynamoDbNewClientsFinanceTable"
          SourceEmailSender: "josemiguelaparicio507@gmail.com"
      Runtime: python3.8

  rIAMLambdaClientStatusEmailRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "client-status-email-iam-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLogsPolocy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:<api-id>/*/<method>/<resource>"

  ### END LAMBDAS ###

  ## API GATEWAY ENDPOINTS ##

  rApiGWFFinanceAPI:
    Type: AWS::ApiGateway::RestApi
    DependsOn: 
      - "rLambdaRegisterClientPetition"
      - "rLambdaClientStatusEmail"
    Properties:
      Name: !Sub "cashiapp-finance-api-rest-${pStage}"
      
  ## ENDPOINT CLIENT REGISTRATION


  rApiGWFinanceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt "rApiGWFFinanceAPI.RootResourceId"
      PathPart: "client-registration-loan"
      RestApiId: !Ref "rApiGWFFinanceAPI"

  rApiGWFinanceMethodPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref rApiGWFinanceResource
      RestApiId: !Ref rApiGWFFinanceAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rLambdaRegisterClientPetition.Arn}/invocations"
          - lambdaArn: !GetAtt "rLambdaRegisterClientPetition.Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  rApiGWFinanceMethodOPTIONS:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        ResourceId: !Ref rApiGWFinanceResource
        RestApiId: !Ref rApiGWFFinanceAPI
        Integration:
          IntegrationHttpMethod: OPTIONS
          Type: MOCK
          Uri: !Sub
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rLambdaRegisterClientPetition.Arn}/invocations"
            - lambdaArn: !GetAtt "rLambdaRegisterClientPetition.Arn"
          IntegrationResponses:
            - StatusCode: "200"
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              ResponseTemplates:
                application/json: 
                  | 
                    "{
                      "statusCode": 200,
                      "headers": {
                        "Access-Control-Allow-Headers": "Content-Type",
                        "Access-Control-Allow-Origin": "https://dpbugva79arxb.cloudfront.net",
                        "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
                      },
                      "body": $input.json('$.body')
                    }"
        MethodResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true

  rApiGWFinanceDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
        - "rApiGWFinanceMethodPOST"
        - "rApiGWFinanceMethodOPTIONS"
    Properties:
      RestApiId: !Ref "rApiGWFFinanceAPI"
      StageName: !Ref "pStage"

  rAPIGWFinanceLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: rApiGWFinanceDeployment
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref rLambdaRegisterClientPetition
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${rApiGWFFinanceAPI}/*/POST/finance"
  ## END ENDPOINT CLIENT REGISTRATION

  ## ENDPOINT Sucursal Emails
  rApiGWClientEmailSenderResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt "rApiGWFFinanceAPI.RootResourceId"
      PathPart: "email-sender-motor-loan"
      RestApiId: !Ref "rApiGWFFinanceAPI"

  rApiGWClientEmailSenderMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref rApiGWClientEmailSenderResource
      RestApiId: !Ref rApiGWFFinanceAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rLambdaClientStatusEmail.Arn}/invocations"
          - lambdaArn: !GetAtt "rLambdaClientStatusEmail.Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true


  rApiGWClientEmailSenderLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: rApiGWFinanceDeployment
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref rLambdaClientStatusEmail
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${rApiGWFFinanceAPI}/*/POST/finance/email-sender-loan"
  ## END ENDPOINT CLIENT REGISTRATION

  ## END API GATEWAY ENDPOINTS ##

  ## DYNAMO TABLES ##
  rDynamoDbNewClientsFinanceTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "cashi-finance-session-clients-${pStage}"
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification: 
          AttributeName: TTL
          Enabled: true
      StreamSpecification:
        StreamViewType: "OLD_IMAGE"    
  ## END DYNAMO TABLES ##

  rLambdaTriggerMotorLoanEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt rDynamoDbNewClientsFinanceTable.StreamArn
      FunctionName: !GetAtt rLambdaLoanMotorDecision.Arn
      BatchSize: 1
      MaximumBatchingWindowInSeconds: 5
      StartingPosition: LATEST
      MaximumRetryAttempts: 1
      Enabled: True

  ### BUCKETS S3 ###
  rS3StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "static-website-finance-${pStage}"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true # Restringir el acceso público a S3
        BlockPublicPolicy: true # Restringir el acceso público a través de políticas
        IgnorePublicAcls: true # Ignorar ACL públicas
        RestrictPublicBuckets: true # Restringir buckets públicos
      # WebsiteConfiguration:
      #   IndexDocument: index.html

  rS3StaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref "rS3StaticWebsiteBucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action:
              - s3:GetObject
            Resource:
              - !Sub "${rS3StaticWebsiteBucket.Arn}"
              - !Sub "${rS3StaticWebsiteBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${rCloudFrontWebsiteDistribution}"

  rS3ClientsDiligentIdentityDocuments:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "client-diligence-identity-documents-${pStage}"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true # Restringir el acceso público a S3
        BlockPublicPolicy: true # Restringir el acceso público a través de políticas
        IgnorePublicAcls: true # Ignorar ACL públicas
        RestrictPublicBuckets: true # Restringir buckets públicos
      # WebsiteConfiguration:
      #   IndexDocument: index.html

  # rS3ClientsDiligentIdentityDocumentsBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref "rS3ClientsDiligentIdentityDocuments"
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: PublicReadGetObject
  #           Effect: Allow
  #           Principal:
  #             Service: "cloudfront.amazonaws.com"
  #           Action:
  #             - s3:GetObject
  #           Resource:
  #             - !Sub "${rS3StaticWebsiteBucket.Arn}"
  #             - !Sub "${rS3StaticWebsiteBucket.Arn}/*"

  rS3ClientsDiligentLoans:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "client-diligence-loans-${pStage}"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true # Restringir el acceso público a S3
        BlockPublicPolicy: true # Restringir el acceso público a través de políticas
        IgnorePublicAcls: true # Ignorar ACL públicas
        RestrictPublicBuckets: true # Restringir buckets públicos
      # WebsiteConfiguration:
      #   IndexDocument: index.html

  # rS3ClientsDiligentLoansBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref "rS3ClientsDiligentLoans"
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: PublicReadGetObject
  #           Effect: Allow
  #           Principal:
  #             Service: "cloudfront.amazonaws.com"
  #           Action:
  #             - s3:GetObject
  #           Resource:
  #             - !Sub "${rS3StaticWebsiteBucket.Arn}"
  #             - !Sub "${rS3StaticWebsiteBucket.Arn}/*"
  ### END BUCKETS S3 ###

  rCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  rCloudFrontWebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: rCloudFrontOriginAccessControl
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt rS3StaticWebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt "rCloudFrontOriginAccessControl.Id"
        Enabled: true
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
          DefaultTTL: 86400
        DefaultRootObject: index.html

  ## SES ##
  rSESEmailSenderAdress:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: "josemiguelaparicio507@gmail.com"
  ## END SES ##
