AWSTemplateFormatVersion: "2010-09-09"
Description: Template para crear una API Gateway y una Lambda en Python que imprime "Hello, World!" en los registros de CloudWatch.

Parameters:
  pStage:
    Type: String
    Default: dev
    Description: Ambiente

  DeploymentBucketName:
    Type: String
    Description: Nombre del bucket de despliegue

  DeploymentBucketARN:
    Type: String
    Description: ARN del bucket de despliegue

Resources:
  rLambdaRegisterClientPetition:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "lambda-client-register-petition-${pStage}"
      Role: !GetAtt "rIAMLambdaRegisterClientPetitionRole.Arn"
      Handler: "Register_Client_Petitions/index.lambda_handler"
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: "api-rest/Register_Client_Petitions.zip" # Reemplaza con la ubicación de tu código en el bucket
      Environment: # Agrega la nueva variable de entorno aquí
        Variables:
          DBTableNewClientsToRegister: !Ref "rDynamoDbNewClientsFinanceTable"
      Runtime: python3.8

  rIAMLambdaRegisterClientPetitionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLogsPolocy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:<api-id>/*/<method>/<resource>"

  rApiGWFFinanceAPI:
    Type: AWS::ApiGateway::RestApi
    DependsOn: rLambdaRegisterClientPetition
    Properties:
      Name: !Sub "cashiapp-finance-api-rest-${pStage}"

  rApiGWFinanceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt "rApiGWFFinanceAPI.RootResourceId"
      PathPart: finance
      RestApiId: !Ref "rApiGWFFinanceAPI"

  rApiGWFinanceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref rApiGWFinanceResource
      RestApiId: !Ref rApiGWFFinanceAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rLambdaRegisterClientPetition.Arn}/invocations"
          - lambdaArn: !GetAtt "rLambdaRegisterClientPetition.Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  rApiGWFinanceDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: "rApiGWFinanceMethod"
    Properties:
      RestApiId: !Ref "rApiGWFFinanceAPI"
      StageName: !Ref pStage

  rAPIGWFinanceLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: rApiGWFinanceDeployment
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref rLambdaRegisterClientPetition
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${rApiGWFFinanceAPI}/*/GET/finance"

  rDynamoDbNewClientsFinanceTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "cashi-finance-session-clients-${pStage}"
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  rS3StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "static-website-finance-${pStage}"
      AccessControl: PublicRead # Establece el control de acceso a "Private" por defecto
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  rS3StaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref "rS3StaticWebsiteBucket"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource:
              - !Sub "${rS3StaticWebsiteBucket.Arn}"
              - !Sub "${rS3StaticWebsiteBucket.Arn}/*"
Outputs:
  ApiEndpoint:
    Description: URL de la API Gateway
    Value:
      Fn::Sub: https://${rApiGWFFinanceAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/hello/
